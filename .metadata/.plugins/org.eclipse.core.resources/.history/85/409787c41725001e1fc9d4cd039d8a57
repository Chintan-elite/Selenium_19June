Core java : 
*********************
JVM
JRE
JDK

********************
Variables and dataypes

variable naming rules : 

1 : A variable name can consist of Capital letters A-Z, lowercase letters a-z digits 0-9, and two special characters such as _ underscore and $ dollar sign.
2 : The first character must not be a digit.
3 : Blank spaces cannot be used in variable names.
4 : Java keywords cannot be used as variable names.
5 : Variable names are case-sensitive.
6 : There is no limit on the length of a variable name but by convention, it should be between 4 to 15 chars.
7 : Variable names always should exist on the left-hand side of assignment operators.

naming convention : 

If the name contains multiple words, start it with the lowercase letter followed by an uppercase letter such as firstName, lastName.
Avoid using one-character variables such as x, y, z.

package name : should be in lowercase
Class name : Everyword should start with Capital

*****************************************************
Datatypes : 

it indicates that what type of data variable will hold and how much space in mamory it will occupied

8 datatypes in java : 

byte   0 	1 byte  2^7-1 to -2^7  : 127 to -128 
short  0	2 byte  2^15-1 to -2^15 : 32767 to 32768
int    0	4 byte  2^31-1 to -2^31 : 
long   0	8 byte

float  0.0	4 byte
double 0.0	8 byte

char    	2 byte
boolean false	1 bit

1 bit
8 bit => 1 byte
1024 byte => 1kb
1024 kb => 1 mb
1024 mb => 1 gb
1024 gb => 1 tb

datatype casting : 
convert one type of data into another type

types : 
widninig - implicite
nerrowing - explicite

*******************************
oprator : 

Aarithmatic : +,-,*,/,%
Logical : &&, ||, !
Relational : ==, <, >, <=, >=
Unary : ++, --
Turnary

*************************
statements : 

conditional
if
if-else
switch-case

looping
for
while
do-while

************************
prime
armstrong
fibbonacci
factorial

************************
Array : 

collection of same type of data :

1D array
multi dimentional array

array index starts from 0.


********************************
********************************
POP : precedure oriented, ex. C
top-bottom

OOPS : object oriented programming
bottom-up : 

class
object
encaptulation
inheritance
polymorphism
abstraction

***********
class : logical entity
object : realtime entity
state / variable / field / datamember
behaviour / methods / function /function member

method : 
block to write logical opration

accessmodifire  returntype methodname(args)
{
	//body
}

ex : public void sample()
{
	//logic
}

object :
classname ref.var. = new construnctorofclass()

ex : class Pen

object : Pen p = new Pen()

*********************************
datamember and function member can be of two types:
static  / class member   : signle copy /
non static / instance member : copy as per object created

***************
Constructor
--same name as a classname

--types of cons : 
default or 0 parameter
parameterised or user define

constructor overloading : 
same name with diffrent parameter
we can diffrencite para. by length or by type

************************************
Access modifier : 
public : anywhare
private : within class only
protected : within package but outside the packahe with inheritance
default : within package

***********************************
Encaptulation : 
Encapsulation is one of the key features of object-oriented 
programming. Encapsulation refers to the bundling of fields 
and methods inside a single class. It prevents outer classes 
from accessing and changing fields and methods of a class. 
This also helps to achieve data hiding.

***********************************
Inheritance : 
nheritance in Java is the method to create a hierarchy between 
classes by inheriting from other classes. Java Inheritance is
 transitive - so if Sedan extends Car and Car extends Vehicle, 
 then Sedan is also inherited from the Vehicle class. 
 The Vehicle becomes the superclass of both Car and Sedan.

1 : simple 
A-->B

2 : multilevel
A-->B-->C

3 : hierarchical
A-->B
|-->C

4 : multiple
--not supported in java
A-->C
B--|

******************************
Polymorphism

Polymorphism is considered one of the important features of 
Object-Oriented Programming. Polymorphism allows us to perform 
a single action in different ways. In other words, 
polymorphism allows you to define one interface and have multiple implementations.
The word “poly” means many and “morphs” means forms,
So it means many forms.

compiletime ex. methodoverloading
-same name method in same class with diffrent arguments
-args can be differ by length or by type


Runtime ex. method overriding
-same name name method in super class to subclass with diffrent body

***************************************************
Abstraction : 

Data abstraction is the process of hiding certain details
and showing only essential information to the user.

Abstraction can be achieved with either abstract classes 
or interfaces 

Abstract class : partial abstraction
contains both abstract an dinstance method

Interface : 100% abstraction
contains only abstract method

Abstract Method : 
method without body

public void display();

Instance method : 
method with body

public void display()
{
	//body
}

********************************************
Keywords : 

static : creates single copy in a memory
this : referes current class member
super : referes super class member
final : constant 

we can use final keyword with variable, method and class
variable : we can not change the value
method : we can not override
class : we can not inherit

**********************************************
java Important classes : 

String
String buffer
String builder
Object
Wrapper

String : 
immutable class / not changeable












































